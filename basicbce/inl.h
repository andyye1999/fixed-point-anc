

static __inline int _NormW32(int a)
{
	int zeros;

	if (a == 0) return 0;
	else if (a < 0)  a = ~a;

	if (!(0xFFFF8000 & a)) zeros = 16;
	else                   zeros = 0;

	if (!(0xFF800000 & (a << zeros))) zeros += 8;
	if (!(0xF8000000 & (a << zeros))) zeros += 4;
	if (!(0xE0000000 & (a << zeros))) zeros += 2;
	if (!(0xC0000000 & (a << zeros))) zeros += 1;

	return zeros;
}
static __inline int _NormU32(unsigned int a)
{
	int zeros;

	if (a == 0) return 0;

	if (!(0xFFFF0000 & a)) zeros = 16;
	else                   zeros = 0;

	if (!(0xFF000000 & (a << zeros))) zeros += 8;
	if (!(0xF0000000 & (a << zeros))) zeros += 4;
	if (!(0xC0000000 & (a << zeros))) zeros += 2;
	if (!(0x80000000 & (a << zeros))) zeros += 1;

	return zeros;
}
static __inline int _NormW16(short a)
{
	int zeros;

	if (a == 0) return 0;
	else if (a < 0) a = ~a;

	if (!(0xFF80 & a)) zeros = 8;
	else               zeros = 0;

	if (!(0xF800 & (a << zeros))) zeros += 4;
	if (!(0xE000 & (a << zeros))) zeros += 2;
	if (!(0xC000 & (a << zeros))) zeros += 1;

	return zeros;
}
static long _norm(long x) { long i; for (i = 1; i < 32; i++) if ((x ^ (x << i)) < 0) break;  return(i - 1); }
long _abs(long x) { return((x == (long)0x80000000) ? 2147483647L : (x > 0 ? x : -x)); }

short _subc(short b)
{
	short i, out, sign;
	long A, B;
	if (b < 0)
		sign = -1;
	else
		sign = 1;
	A = 16384;
	B = (long)_abs(b);
	for (out = i = 0; i < 15; i++)
	{
		out <<= 1;
		A <<= 1;
		if (A >= B)
		{
			A = A - B;
			out += 1;
		}
	}
	return sign * out;
}

static const int16_t kLogTableFrac[256] = {
  0,   1,   3,   4,   6,   7,   9,  10,  11,  13,  14,  16,  17,  18,  20,  21,
  22,  24,  25,  26,  28,  29,  30,  32,  33,  34,  36,  37,  38,  40,  41,  42,
  44,  45,  46,  47,  49,  50,  51,  52,  54,  55,  56,  57,  59,  60,  61,  62,
  63,  65,  66,  67,  68,  69,  71,  72,  73,  74,  75,  77,  78,  79,  80,  81,
  82,  84,  85,  86,  87,  88,  89,  90,  92,  93,  94,  95,  96,  97,  98,  99,
  100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116,
  117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
  132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
  147, 148, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159, 160,
  161, 162, 163, 164, 165, 166, 167, 168, 169, 169, 170, 171, 172, 173, 174,
  175, 176, 177, 178, 178, 179, 180, 181, 182, 183, 184, 185, 185, 186, 187,
  188, 189, 190, 191, 192, 192, 193, 194, 195, 196, 197, 198, 198, 199, 200,
  201, 202, 203, 203, 204, 205, 206, 207, 208, 208, 209, 210, 211, 212, 212,
  213, 214, 215, 216, 216, 217, 218, 219, 220, 220, 221, 222, 223, 224, 224,
  225, 226, 227, 228, 228, 229, 230, 231, 231, 232, 233, 234, 234, 235, 236,
  237, 238, 238, 239, 240, 241, 241, 242, 243, 244, 244, 245, 246, 247, 247,
  248, 249, 249, 250, 251, 252, 252, 253, 254, 255, 255
};

